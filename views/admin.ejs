<div class="container">
    <h2 class="mb-4" data-i18n="adminPanelTitle">Kattapult Admin Panel</h2>
    
    <% if (locals.error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <span data-i18n="<%= error %>"><%= error %></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    <% } %>
    
    <% if (locals.success) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <span data-i18n="<%= success %>"><%= success %></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    <% } %>
    
    <div class="row mb-5">
        <div class="col-12">
            <h3 data-i18n="userManagement">User Management</h3>
            
            <!-- User Creation Form -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0" data-i18n="createUser">Create New User</h5>
                </div>
                <div class="card-body">
                    <form action="/admin/create-user" method="POST">
                        <div class="row">
                            <div class="col-md-3 mb-3">
                                <label for="username" class="form-label" data-i18n="username">Username</label>
                                <input type="text" class="form-control" id="username" name="username" required>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="password" class="form-label" data-i18n="password">Password</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="displayName" class="form-label" data-i18n="displayName">Display Name</label>
                                <input type="text" class="form-control" id="displayName" name="displayName">
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="role" class="form-label" data-i18n="role">Role</label>
                                <select class="form-select" id="role" name="role" required>
                                    <option value="user">User</option>
                                    <option value="trusted_user">Trusted User</option>
                                    <option value="admin">Admin</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="approved" name="approved" checked>
                            <label class="form-check-label" for="approved" data-i18n="approved">
                                Approved (can login immediately)
                            </label>
                        </div>
                        <button type="submit" class="btn btn-primary" data-i18n="createUser">Create User</button>
                    </form>
                </div>
            </div>
            
            <!-- Search and Filter Controls -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" id="userSearchInput" class="form-control" placeholder="Search by username, display name, or role..." data-i18n-placeholder="searchPlaceholder">
                        <button class="btn btn-outline-secondary" type="button" id="userSearchBtn" data-i18n="search">Search</button>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="input-group">
                        <span class="input-group-text" data-i18n="sortBy">Sort by</span>
                        <select id="userSortSelect" class="form-select">
                            <option value="username">Username</option>
                            <option value="displayName">Display Name</option>
                            <option value="role">Role</option>
                            <option value="approved">Approval Status</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <select id="userSortDirectionSelect" class="form-select">
                        <option value="asc" data-i18n="ascending">Ascending</option>
                        <option value="desc" data-i18n="descending">Descending</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="input-group">
                        <span class="input-group-text" data-i18n="filterBy">Filter by</span>
                        <select id="userFilterSelect" class="form-select">
                            <option value="all" data-i18n="allUsers">All Users</option>
                            <option value="approved" data-i18n="approvedOnly">Approved Only</option>
                            <option value="pending" data-i18n="pendingOnly">Pending Only</option>
                        </select>
                        <button class="btn btn-outline-secondary" type="button" id="clearUserFiltersBtn" data-i18n="clearFilters">Clear Filters</button>
                    </div>
                </div>
            </div>
            
            <div class="table-responsive">
                <table class="table table-striped" id="userTable">
                    <thead>
                        <tr>
                            <th class="sortable" data-sort="username" data-i18n="user">User</th>
                            <th class="sortable" data-sort="role" data-i18n="role">Role</th>
                            <th class="sortable" data-sort="approved" data-i18n="approved">Approved</th>
                            <th data-i18n="actions">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% allUsers.forEach(user => { %>
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <% if (user.profile_picture) { %>
                                            <img src="<%= user.profile_picture %>" alt="Profile" class="profile-picture me-2">
                                        <% } else { %>
                                            <div class="profile-picture-placeholder me-2">
                                                <span><%= user.display_name ? user.display_name.charAt(0).toUpperCase() : user.username.charAt(0).toUpperCase() %></span>
                                            </div>
                                        <% } %>
                                        <span><%= user.display_name ? `${user.display_name} (@${user.username})` : user.username %></span>
                                    </div>
                                </td>
                                <td>
                                    <% if (user.username === 'BobKåre') { %>
                                        <span class="badge bg-primary">Super Admin</span>
                                    <% } else { %>
                                        <span class="badge <%= user.role === 'admin' ? 'bg-danger' : (user.role === 'trusted_user' ? 'bg-warning' : 'bg-secondary') %>">
                                            <%= user.role === 'admin' ? 'Admin' : (user.role === 'trusted_user' ? 'Trusted User' : 'User') %>
                                        </span>
                                        <form action="/admin/update-role/<%= user.id %>" method="POST" style="display: inline;">
                                            <select name="role" class="form-select form-select-sm mt-1" onchange="this.form.submit()">
                                                <option value="user" <%= user.role === 'user' ? 'selected' : '' %>>User</option>
                                                <option value="trusted_user" <%= user.role === 'trusted_user' ? 'selected' : '' %>>Trusted User</option>
                                                <option value="admin" <%= user.role === 'admin' ? 'selected' : '' %>>Admin</option>
                                            </select>
                                        </form>
                                    <% } %>
                                </td>
                                <td>
                                    <% if (user.approved) { %>
                                        <span class="badge bg-success">Approved</span>
                                    <% } else { %>
                                        <span class="badge bg-warning">Pending</span>
                                    <% } %>
                                </td>
                                <td>
                                    <% if (user.username !== 'BobKåre') { %>
                                        <% if (user.approved) { %>
                                            <form action="/admin/unapprove-user/<%= user.id %>" method="POST" style="display: inline;">
                                                <input type="hidden" name="_method" value="POST">
                                                <input type="hidden" name="userId" value="<%= user.id %>">
                                                <button type="submit" class="btn btn-warning btn-sm">Unapprove</button>
                                            </form>
                                        <% } else { %>
                                            <form action="/admin/approve-user/<%= user.id %>" method="POST" style="display: inline;">
                                                <input type="hidden" name="_method" value="POST">
                                                <input type="hidden" name="userId" value="<%= user.id %>">
                                                <button type="submit" class="btn btn-success btn-sm">Approve</button>
                                            </form>
                                        <% } %>
                                        <form action="/admin/delete-user/<%= user.id %>?next=/admin" method="POST" style="display: inline;" onsubmit="return confirm(translate('deleteUserConfirmation'));">
                                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                        </form>
                                        <div class="password-reset-form" style="display: inline-block;">
                                            <form action="/admin/reset-password/<%= user.id %>?next=/admin" method="POST" style="display: inline;">
                                                <div class="input-group">
                                                    <input type="password" class="form-control" name="newPassword" placeholder="New Password" required>
                                                    <button type="submit" class="btn btn-primary">Reset Password</button>
                                                </div>
                                            </form>
                                        </div>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row mb-5">
        <div class="col-12">
            <h3 data-i18n="commentsManagement">Comments Management</h3>
            
            <!-- Search and Filter Controls for Comments -->
            <div class="row mb-3">
                <div class="col-md-5">
                    <div class="input-group">
                        <input type="text" id="commentSearchInput" class="form-control" placeholder="Search comments..." data-i18n-placeholder="searchComments">
                        <button class="btn btn-outline-secondary" type="button" id="commentSearchBtn" data-i18n="search">Search</button>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text" data-i18n="sortBy">Sort by</span>
                        <select id="commentSortSelect" class="form-select">
                            <option value="user">User</option>
                            <option value="post">Post</option>
                            <option value="date" selected>Date</option>
                        </select>
                        <select id="commentSortDirectionSelect" class="form-select">
                            <option value="asc" data-i18n="ascending">Ascending</option>
                            <option value="desc" data-i18n="descending">Descending</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-secondary" type="button" id="clearCommentFiltersBtn" data-i18n="clearFilters">Clear Filters</button>
                </div>
            </div>
            
            <div class="table-responsive">
                <table class="table table-striped" id="commentTable">
                    <thead>
                        <tr>
                            <th class="sortable" data-sort="user" data-i18n="user">User</th>
                            <th class="sortable" data-sort="post" data-i18n="post">Post</th>
                            <th data-i18n="comment">Comment</th>
                            <th class="sortable" data-sort="date" data-i18n="date">Date</th>
                            <th data-i18n="actions">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% allComments.forEach(function(comment) { %>
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <% if (comment.commenter_picture) { %>
                                            <img src="<%= comment.commenter_picture %>" alt="Profile" class="profile-picture me-2">
                                        <% } else { %>
                                            <div class="profile-picture-placeholder me-2">
                                                <span><%= comment.commenter_display_name ? comment.commenter_display_name.charAt(0).toUpperCase() : comment.commenter_username.charAt(0).toUpperCase() %></span>
                                            </div>
                                        <% } %>
                                        <span><%= comment.commenter_display_name ? `${comment.commenter_display_name} (@${comment.commenter_username})` : comment.commenter_username %></span>
                                    </div>
                                </td>
                                <td>
                                    <% 
                                    // Get the item title from the items array
                                    const item = approvedItems.find(i => i.id === comment.item_id) || 
                                                pendingItems.find(i => i.id === comment.item_id);
                                    %>
                                    <%= item ? item.title : 'Unknown Post' %>
                                </td>
                                <td>
                                    <% if (comment.content && comment.content.trim() !== '') { %>
                                        <%= comment.content %>
                                    <% } %>
                                    <% if (comment.gif_url) { %>
                                        <div>
                                            <img src="<%= comment.gif_url %>" alt="GIF" class="img-fluid rounded" style="max-height: 100px;">
                                        </div>
                                    <% } %>
                                </td>
                                <td>
                                    <div><%= new Date(comment.created_at).toLocaleDateString() %></div>
                                    <div class="small text-muted"><%= new Date(comment.created_at).toLocaleTimeString() %></div>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#editCommentModal<%= comment.id %>" data-i18n="edit">
                                        Edit
                                    </button>
                                    <form action="/admin/delete-comment/<%= comment.id %>" method="POST" class="d-inline"
                                          onsubmit="return confirm(translate('deleteCommentConfirmation'))">
                                        <button type="submit" class="btn btn-sm btn-danger" data-i18n="delete">Delete</button>
                                    </form>
                                </td>
                            </tr>
                            
                            <!-- Edit Comment Modal -->
                            <div class="modal fade" id="editCommentModal<%= comment.id %>" tabindex="-1" aria-labelledby="editCommentModalLabel<%= comment.id %>" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="editCommentModalLabel<%= comment.id %>" data-i18n="editComment">Edit Comment</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <form action="/admin/edit-comment/<%= comment.id %>" method="POST">
                                            <div class="modal-body">
                                                <div class="mb-3">
                                                    <label for="commentContent<%= comment.id %>" class="form-label" data-i18n="commentContent">Comment Content</label>
                                                    <textarea class="form-control" id="commentContent<%= comment.id %>" name="content" rows="3"><%= comment.content %></textarea>
                                                </div>
                                                <% if (comment.gif_url) { %>
                                                    <div class="mb-3">
                                                        <label class="form-label" data-i18n="currentGif">Current GIF</label>
                                                        <div>
                                                            <img src="<%= comment.gif_url %>" alt="Current GIF" class="img-fluid rounded" style="max-height: 200px;">
                                                        </div>
                                                        <div class="form-check mt-2">
                                                            <input class="form-check-input" type="checkbox" id="keepGif<%= comment.id %>" name="keepGif" value="true" checked>
                                                            <label class="form-check-label" for="keepGif<%= comment.id %>" data-i18n="keepGif">
                                                                Keep this GIF
                                                            </label>
                                                        </div>
                                                    </div>
                                                <% } %>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-i18n="cancel">Cancel</button>
                                                <button type="submit" class="btn btn-primary" data-i18n="saveChanges">Save Changes</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row mb-5">
        <div class="col-12">
            <h3 data-i18n="pendingContent">Pending Content</h3>
            
            <!-- Search and Sort Controls for Pending Content -->
            <div class="row mb-3">
                <div class="col-md-5">
                    <div class="input-group">
                        <input type="text" id="pendingContentSearchInput" class="form-control" placeholder="Search content..." data-i18n-placeholder="searchContent">
                        <button class="btn btn-outline-secondary" type="button" id="pendingContentSearchBtn" data-i18n="search">Search</button>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text" data-i18n="sortBy">Sort by</span>
                        <select id="pendingContentSortSelect" class="form-select">
                            <option value="title">Title</option>
                            <option value="author">Author</option>
                            <option value="date" selected>Date</option>
                            <option value="votes">Votes</option>
                        </select>
                        <select id="pendingContentSortDirectionSelect" class="form-select">
                            <option value="asc" data-i18n="ascending">Ascending</option>
                            <option value="desc" data-i18n="descending">Descending</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-secondary" type="button" id="clearPendingContentFiltersBtn" data-i18n="clearFilters">Clear Filters</button>
                </div>
            </div>
            
            <div class="row" id="pendingContentContainer">
                <% pendingItems.forEach(function(item) { %>
                    <div class="col-md-4 content-card" 
                         data-title="<%= item.title.toLowerCase() %>" 
                         data-author="<%= (item.author_display_name || item.author_username).toLowerCase() %>" 
                         data-date="<%= new Date(item.created_at).getTime() %>"
                         data-votes="<%= item.vote_count %>">
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="d-flex align-items-center mb-3">
                                    <% if (item.author_picture) { %>
                                        <img src="<%= item.author_picture %>" alt="Author" class="profile-picture me-2">
                                    <% } else { %>
                                        <div class="profile-picture-placeholder me-2">
                                            <span><%= item.author_display_name ? item.author_display_name.charAt(0).toUpperCase() : item.author_username.charAt(0).toUpperCase() %></span>
                                        </div>
                                    <% } %>
                                    <div>
                                        <h5 class="card-title mb-0"><%= item.title %></h5>
                                        <small class="text-muted"><span data-i18n="postedBy">Posted by</span> <%= item.author_display_name ? `${item.author_display_name} (@${item.author_username})` : item.author_username %> • <span data-i18n="postedOn">Posted on</span>: <%= new Date(item.created_at).toLocaleString() %></small>
                                    </div>
                                </div>
                                
                                <p class="card-text"><%= item.content %></p>
                                <% if (item.gif_url) { %>
                                    <div class="mb-3">
                                        <img src="<%= item.gif_url %>" alt="GIF" class="img-fluid rounded" style="max-height: 150px;">
                                    </div>
                                <% } %>
                                <p class="text-muted small"><span data-i18n="votes">Votes</span>: <%= item.vote_count %></p>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editPostModal<%= item.id %>" data-i18n="edit">
                                        Edit
                                    </button>
                                    <form action="/admin/approve/<%= item.id %>" method="POST" class="d-inline">
                                        <button type="submit" class="btn btn-success" data-i18n="approve">Approve</button>
                                    </form>
                                    <form action="/admin/delete-post/<%= item.id %>" method="POST" class="d-inline"
                                          onsubmit="return confirm(translate('deletePostConfirmation'))">
                                        <button type="submit" class="btn btn-danger" data-i18n="delete">Delete</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Edit Post Modal -->
                        <div class="modal fade" id="editPostModal<%= item.id %>" tabindex="-1" aria-labelledby="editPostModalLabel<%= item.id %>" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="editPostModalLabel<%= item.id %>" data-i18n="editPost">Edit Post</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <form action="/admin/edit-post/<%= item.id %>" method="POST">
                                        <div class="modal-body">
                                            <div class="mb-3">
                                                <label for="postTitle<%= item.id %>" class="form-label" data-i18n="title">Title</label>
                                                <input type="text" class="form-control" id="postTitle<%= item.id %>" name="title" value="<%= item.title %>" required>
                                            </div>
                                            <div class="mb-3">
                                                <label for="postContent<%= item.id %>" class="form-label" data-i18n="content">Content</label>
                                                <textarea class="form-control" id="postContent<%= item.id %>" name="content" rows="5" required><%= item.content %></textarea>
                                            </div>
                                            <% if (item.gif_url) { %>
                                                <div class="mb-3">
                                                    <label class="form-label" data-i18n="currentGif">Current GIF</label>
                                                    <div>
                                                        <img src="<%= item.gif_url %>" alt="Current GIF" class="img-fluid rounded" style="max-height: 200px;">
                                                    </div>
                                                    <div class="form-check mt-2">
                                                        <input class="form-check-input" type="checkbox" id="keepGif<%= item.id %>" name="keepGif" value="true" checked>
                                                        <label class="form-check-label" for="keepGif<%= item.id %>" data-i18n="keepGif">
                                                            Keep this GIF
                                                        </label>
                                                    </div>
                                                </div>
                                            <% } %>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-i18n="cancel">Cancel</button>
                                            <button type="submit" class="btn btn-primary" data-i18n="saveChanges">Save Changes</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>

    <div class="row mb-5">
        <div class="col-12">
            <h3 data-i18n="approvedContent">Approved Content</h3>
            
            <!-- Search and Sort Controls for Approved Content -->
            <div class="row mb-3">
                <div class="col-md-5">
                    <div class="input-group">
                        <input type="text" id="approvedContentSearchInput" class="form-control" placeholder="Search content..." data-i18n-placeholder="searchContent">
                        <button class="btn btn-outline-secondary" type="button" id="approvedContentSearchBtn" data-i18n="search">Search</button>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text" data-i18n="sortBy">Sort by</span>
                        <select id="approvedContentSortSelect" class="form-select">
                            <option value="title">Title</option>
                            <option value="author">Author</option>
                            <option value="date" selected>Date</option>
                            <option value="votes">Votes</option>
                        </select>
                        <select id="approvedContentSortDirectionSelect" class="form-select">
                            <option value="asc" data-i18n="ascending">Ascending</option>
                            <option value="desc" data-i18n="descending">Descending</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <button class="btn btn-outline-secondary" type="button" id="clearApprovedContentFiltersBtn" data-i18n="clearFilters">Clear Filters</button>
                </div>
            </div>
            
            <div class="row" id="approvedContentContainer">
                <% approvedItems.forEach(function(item) { %>
                    <div class="col-md-4 content-card" 
                         data-title="<%= item.title.toLowerCase() %>" 
                         data-author="<%= (item.author_display_name || item.author_username).toLowerCase() %>" 
                         data-date="<%= new Date(item.created_at).getTime() %>"
                         data-votes="<%= item.vote_count %>">
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="d-flex align-items-center mb-3">
                                    <% if (item.author_picture) { %>
                                        <img src="<%= item.author_picture %>" alt="Author" class="profile-picture me-2">
                                    <% } else { %>
                                        <div class="profile-picture-placeholder me-2">
                                            <span><%= item.author_display_name ? item.author_display_name.charAt(0).toUpperCase() : item.author_username.charAt(0).toUpperCase() %></span>
                                        </div>
                                    <% } %>
                                    <div>
                                        <h5 class="card-title mb-0"><%= item.title %></h5>
                                        <small class="text-muted"><span data-i18n="postedBy">Posted by</span> <%= item.author_display_name ? `${item.author_display_name} (@${item.author_username})` : item.author_username %> • <span data-i18n="postedOn">Posted on</span>: <%= new Date(item.created_at).toLocaleString() %></small>
                                    </div>
                                </div>
                                
                                <p class="card-text"><%= item.content %></p>
                                <% if (item.gif_url) { %>
                                    <div class="mb-3">
                                        <img src="<%= item.gif_url %>" alt="GIF" class="img-fluid rounded" style="max-height: 150px;">
                                    </div>
                                <% } %>
                                <p class="text-muted small"><span data-i18n="votes">Votes</span>: <%= item.vote_count %></p>
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editApprovedPostModal<%= item.id %>" data-i18n="edit">
                                        Edit
                                    </button>
                                    <form action="/admin/delete-post/<%= item.id %>" method="POST" class="d-inline"
                                          onsubmit="return confirm(translate('deletePostConfirmation'))">
                                        <button type="submit" class="btn btn-danger" data-i18n="delete">Delete</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Edit Approved Post Modal -->
                        <div class="modal fade" id="editApprovedPostModal<%= item.id %>" tabindex="-1" aria-labelledby="editApprovedPostModalLabel<%= item.id %>" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="editApprovedPostModalLabel<%= item.id %>" data-i18n="editPost">Edit Post</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <form action="/admin/edit-post/<%= item.id %>" method="POST">
                                        <div class="modal-body">
                                            <div class="mb-3">
                                                <label for="approvedPostTitle<%= item.id %>" class="form-label" data-i18n="title">Title</label>
                                                <input type="text" class="form-control" id="approvedPostTitle<%= item.id %>" name="title" value="<%= item.title %>" required>
                                            </div>
                                            <div class="mb-3">
                                                <label for="approvedPostContent<%= item.id %>" class="form-label" data-i18n="content">Content</label>
                                                <textarea class="form-control" id="approvedPostContent<%= item.id %>" name="content" rows="5" required><%= item.content %></textarea>
                                            </div>
                                            <% if (item.gif_url) { %>
                                                <div class="mb-3">
                                                    <label class="form-label" data-i18n="currentGif">Current GIF</label>
                                                    <div>
                                                        <img src="<%= item.gif_url %>" alt="Current GIF" class="img-fluid rounded" style="max-height: 200px;">
                                                    </div>
                                                    <div class="form-check mt-2">
                                                        <input class="form-check-input" type="checkbox" id="keepGifApproved<%= item.id %>" name="keepGif" value="true" checked>
                                                        <label class="form-check-label" for="keepGifApproved<%= item.id %>" data-i18n="keepGif">
                                                            Keep this GIF
                                                        </label>
                                                    </div>
                                                </div>
                                            <% } %>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-i18n="cancel">Cancel</button>
                                            <button type="submit" class="btn btn-primary" data-i18n="saveChanges">Save Changes</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize sorting and filtering for user management
        initializeUserManagement();
        
        // Initialize sorting and filtering for comments management
        initializeCommentsManagement();
        
        // Initialize sorting and filtering for content (both pending and approved)
        initializeContentManagement('pending');
        initializeContentManagement('approved');
        
        // Validate comment edit forms
        const commentEditForms = document.querySelectorAll('form[action^="/admin/edit-comment/"]');
        commentEditForms.forEach(form => {
            form.addEventListener('submit', function(e) {
                const contentTextarea = this.querySelector('textarea[name="content"]');
                const keepGifCheckbox = this.querySelector('input[name="keepGif"]');
                
                // Allow submission if either text content is provided or GIF is kept
                if (contentTextarea.value.trim() === '' && (!keepGifCheckbox || !keepGifCheckbox.checked)) {
                    e.preventDefault();
                    alert('Please provide either comment text or keep the GIF.');
                }
            });
        });
        
        // Validate post edit forms
        const postEditForms = document.querySelectorAll('form[action^="/admin/edit-post/"]');
        postEditForms.forEach(form => {
            form.addEventListener('submit', function(e) {
                const titleInput = this.querySelector('input[name="title"]');
                const contentTextarea = this.querySelector('textarea[name="content"]');
                
                if (!titleInput.value.trim()) {
                    e.preventDefault();
                    alert('Please provide a title for the post.');
                }
                
                if (!contentTextarea.value.trim()) {
                    e.preventDefault();
                    alert('Please provide content for the post.');
                }
            });
        });
    });
    
    // User Management Functionality
    function initializeUserManagement() {
        const userSearchInput = document.getElementById('userSearchInput');
        const userSearchBtn = document.getElementById('userSearchBtn');
        const userSortSelect = document.getElementById('userSortSelect');
        const userSortDirectionSelect = document.getElementById('userSortDirectionSelect');
        const userFilterSelect = document.getElementById('userFilterSelect');
        const clearUserFiltersBtn = document.getElementById('clearUserFiltersBtn');
        const userTable = document.getElementById('userTable');
        const sortableHeaders = userTable.querySelectorAll('th.sortable');
        
        // Search functionality
        userSearchBtn.addEventListener('click', function() {
            filterUsers();
        });
        
        userSearchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                filterUsers();
            }
        });
        
        // Sort functionality
        userSortSelect.addEventListener('change', function() {
            sortUsers();
        });
        
        userSortDirectionSelect.addEventListener('change', function() {
            sortUsers();
        });
        
        // Clickable headers for sorting
        sortableHeaders.forEach(header => {
            header.addEventListener('click', function() {
                const sort = this.getAttribute('data-sort');
                
                // If already sorting by this column, toggle direction
                if (userSortSelect.value === sort) {
                    userSortDirectionSelect.value = userSortDirectionSelect.value === 'asc' ? 'desc' : 'asc';
                } else {
                    userSortSelect.value = sort;
                }
                
                sortUsers();
            });
        });
        
        // Filter functionality
        userFilterSelect.addEventListener('change', function() {
            filterUsers();
        });
        
        // Clear filters
        clearUserFiltersBtn.addEventListener('click', function() {
            userSearchInput.value = '';
            userSortSelect.value = 'username';
            userSortDirectionSelect.value = 'asc';
            userFilterSelect.value = 'all';
            
            // Show all rows
            const rows = userTable.querySelectorAll('tbody tr');
            rows.forEach(row => {
                row.style.display = '';
                row.classList.remove('highlight');
            });
            
            // Reset header indicators
            sortableHeaders.forEach(header => {
                header.classList.remove('asc', 'desc');
            });
        });
        
        function filterUsers() {
            const searchTerm = userSearchInput.value.toLowerCase().trim();
            const filterValue = userFilterSelect.value;
            const rows = userTable.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                // Text content for search
                const userCell = row.querySelector('td:nth-child(1)');
                const roleCell = row.querySelector('td:nth-child(2)');
                const approvedCell = row.querySelector('td:nth-child(3)');
                
                const userData = userCell.textContent.toLowerCase();
                const roleBadge = roleCell.querySelector('.badge');
                const roleValue = roleBadge ? roleBadge.textContent.toLowerCase() : roleCell.textContent.toLowerCase();
                const isApproved = approvedCell.textContent.includes('Approved');
                
                let showRow = true;
                
                // Apply search filter
                if (searchTerm) {
                    showRow = userData.includes(searchTerm) || roleValue.includes(searchTerm);
                }
                
                // Apply status filter
                if (showRow && filterValue !== 'all') {
                    if (filterValue === 'approved' && !isApproved) {
                        showRow = false;
                    } else if (filterValue === 'pending' && isApproved) {
                        showRow = false;
                    }
                }
                
                row.style.display = showRow ? '' : 'none';
                
                // Highlight matches
                if (showRow && searchTerm) {
                    row.classList.add('highlight');
                } else {
                    row.classList.remove('highlight');
                }
            });
            
            sortUsers();
        }
        
        function sortUsers() {
            const sortBy = userSortSelect.value;
            const sortDirection = userSortDirectionSelect.value;
            const rows = Array.from(userTable.querySelectorAll('tbody tr'));
            
            // Update header indicators
            sortableHeaders.forEach(header => {
                header.classList.remove('asc', 'desc');
                if (header.getAttribute('data-sort') === sortBy) {
                    header.classList.add(sortDirection);
                }
            });
            
            // Sort the rows
            rows.sort((a, b) => {
                let valueA, valueB;
                
                if (sortBy === 'username') {
                    valueA = a.querySelector('td:nth-child(1)').textContent.toLowerCase();
                    valueB = b.querySelector('td:nth-child(1)').textContent.toLowerCase();
                } else if (sortBy === 'displayName') {
                    // Extract display name from user cell
                    const userCellA = a.querySelector('td:nth-child(1)').textContent;
                    const userCellB = b.querySelector('td:nth-child(1)').textContent;
                    
                    // Try to extract the display name using the actual format "DisplayName (@username)"
                    let displayNameA = userCellA.toLowerCase();
                    let displayNameB = userCellB.toLowerCase();
                    
                    // If the format contains an @ symbol, extract the display name part
                    if (userCellA.includes('@')) {
                        const parts = userCellA.split('(');
                        if (parts.length > 0) {
                            displayNameA = parts[0].trim().toLowerCase();
                        }
                    }
                    
                    if (userCellB.includes('@')) {
                        const parts = userCellB.split('(');
                        if (parts.length > 0) {
                            displayNameB = parts[0].trim().toLowerCase();
                        }
                    }
                    
                    valueA = displayNameA;
                    valueB = displayNameB;
                } else if (sortBy === 'role') {
                    // Get role text from badge
                    const roleBadgeA = a.querySelector('td:nth-child(2) .badge');
                    const roleBadgeB = b.querySelector('td:nth-child(2) .badge');
                    
                    const roleA = roleBadgeA ? roleBadgeA.textContent.trim().toLowerCase() : 
                                  a.querySelector('td:nth-child(2)').textContent.trim().toLowerCase();
                    const roleB = roleBadgeB ? roleBadgeB.textContent.trim().toLowerCase() : 
                                  b.querySelector('td:nth-child(2)').textContent.trim().toLowerCase();
                    
                    // Assign numeric values based on role hierarchy
                    valueA = getRolePriority(roleA);
                    valueB = getRolePriority(roleB);
                } else if (sortBy === 'approved') {
                    valueA = a.querySelector('td:nth-child(3)').textContent.includes('Approved') ? 1 : 0;
                    valueB = b.querySelector('td:nth-child(3)').textContent.includes('Approved') ? 1 : 0;
                }
                
                if (valueA < valueB) return sortDirection === 'asc' ? -1 : 1;
                if (valueA > valueB) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });
            
            // Remove all existing rows
            rows.forEach(row => row.parentNode.removeChild(row));
            
            // Append sorted rows
            rows.forEach(row => {
                if (row.style.display !== 'none') {
                    userTable.querySelector('tbody').appendChild(row);
                } else {
                    userTable.querySelector('tbody').appendChild(row);
                }
            });
        }
        
        // Helper function to get role priority for sorting
        function getRolePriority(role) {
            if (role.includes('super admin')) return 4;
            if (role.includes('admin')) return 3;
            if (role.includes('trusted user')) return 2;
            if (role.includes('user') && !role.includes('trusted user')) return 1;
            return 0; // For any other role
        }
    }
    
    // Comments Management Functionality
    function initializeCommentsManagement() {
        const commentSearchInput = document.getElementById('commentSearchInput');
        const commentSearchBtn = document.getElementById('commentSearchBtn');
        const commentSortSelect = document.getElementById('commentSortSelect');
        const commentSortDirectionSelect = document.getElementById('commentSortDirectionSelect');
        const clearCommentFiltersBtn = document.getElementById('clearCommentFiltersBtn');
        const commentTable = document.getElementById('commentTable');
        const sortableHeaders = commentTable.querySelectorAll('th.sortable');
        
        // Search functionality
        commentSearchBtn.addEventListener('click', function() {
            filterComments();
        });
        
        commentSearchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                filterComments();
            }
        });
        
        // Sort functionality
        commentSortSelect.addEventListener('change', function() {
            sortComments();
        });
        
        commentSortDirectionSelect.addEventListener('change', function() {
            sortComments();
        });
        
        // Clickable headers for sorting
        sortableHeaders.forEach(header => {
            header.addEventListener('click', function() {
                const sort = this.getAttribute('data-sort');
                
                // If already sorting by this column, toggle direction
                if (commentSortSelect.value === sort) {
                    commentSortDirectionSelect.value = commentSortDirectionSelect.value === 'asc' ? 'desc' : 'asc';
                } else {
                    commentSortSelect.value = sort;
                }
                
                sortComments();
            });
        });
        
        // Clear filters
        clearCommentFiltersBtn.addEventListener('click', function() {
            commentSearchInput.value = '';
            commentSortSelect.value = 'date';
            commentSortDirectionSelect.value = 'desc';
            
            // Show all rows
            const rows = commentTable.querySelectorAll('tbody tr');
            rows.forEach(row => {
                row.style.display = '';
                row.classList.remove('highlight');
            });
            
            // Reset header indicators
            sortableHeaders.forEach(header => {
                header.classList.remove('asc', 'desc');
            });
        });
        
        function filterComments() {
            const searchTerm = commentSearchInput.value.toLowerCase().trim();
            const rows = commentTable.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                // Text content for search
                const userCell = row.querySelector('td:nth-child(1)');
                const postCell = row.querySelector('td:nth-child(2)');
                const commentCell = row.querySelector('td:nth-child(3)');
                
                const username = userCell.textContent.toLowerCase();
                const post = postCell.textContent.toLowerCase();
                const comment = commentCell.textContent.toLowerCase();
                
                let showRow = true;
                
                // Apply search filter
                if (searchTerm) {
                    showRow = username.includes(searchTerm) || 
                             post.includes(searchTerm) || 
                             comment.includes(searchTerm);
                }
                
                row.style.display = showRow ? '' : 'none';
                
                // Highlight matches
                if (showRow && searchTerm) {
                    row.classList.add('highlight');
                } else {
                    row.classList.remove('highlight');
                }
            });
            
            sortComments();
        }
        
        function sortComments() {
            const sortBy = commentSortSelect.value;
            const sortDirection = commentSortDirectionSelect.value;
            const rows = Array.from(commentTable.querySelectorAll('tbody tr'));
            
            // Update header indicators
            sortableHeaders.forEach(header => {
                header.classList.remove('asc', 'desc');
                if (header.getAttribute('data-sort') === sortBy) {
                    header.classList.add(sortDirection);
                }
            });
            
            // Sort the rows
            rows.sort((a, b) => {
                let valueA, valueB;
                
                if (sortBy === 'user') {
                    valueA = a.querySelector('td:nth-child(1)').textContent.toLowerCase();
                    valueB = b.querySelector('td:nth-child(1)').textContent.toLowerCase();
                } else if (sortBy === 'post') {
                    valueA = a.querySelector('td:nth-child(2)').textContent.toLowerCase();
                    valueB = b.querySelector('td:nth-child(2)').textContent.toLowerCase();
                } else if (sortBy === 'date') {
                    // Extract date from the date cell text
                    const dateA = new Date(a.querySelector('td:nth-child(4)').querySelector('div').textContent);
                    const dateB = new Date(b.querySelector('td:nth-child(4)').querySelector('div').textContent);
                    valueA = dateA.getTime();
                    valueB = dateB.getTime();
                }
                
                if (valueA < valueB) return sortDirection === 'asc' ? -1 : 1;
                if (valueA > valueB) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });
            
            // Remove all existing rows
            rows.forEach(row => row.parentNode.removeChild(row));
            
            // Append sorted rows
            rows.forEach(row => {
                if (row.style.display !== 'none') {
                    commentTable.querySelector('tbody').appendChild(row);
                } else {
                    commentTable.querySelector('tbody').appendChild(row);
                }
            });
        }
    }
    
    // Content Management Functionality (for both pending and approved content)
    function initializeContentManagement(type) {
        const searchInput = document.getElementById(`${type}ContentSearchInput`);
        const searchBtn = document.getElementById(`${type}ContentSearchBtn`);
        const sortSelect = document.getElementById(`${type}ContentSortSelect`);
        const sortDirectionSelect = document.getElementById(`${type}ContentSortDirectionSelect`);
        const clearFiltersBtn = document.getElementById(`clear${type.charAt(0).toUpperCase() + type.slice(1)}ContentFiltersBtn`);
        const contentContainer = document.getElementById(`${type}ContentContainer`);
        const contentCards = contentContainer.querySelectorAll('.content-card');
        
        // Search functionality
        searchBtn.addEventListener('click', function() {
            filterContent();
        });
        
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                filterContent();
            }
        });
        
        // Sort functionality
        sortSelect.addEventListener('change', function() {
            sortContent();
        });
        
        sortDirectionSelect.addEventListener('change', function() {
            sortContent();
        });
        
        // Clear filters
        clearFiltersBtn.addEventListener('click', function() {
            searchInput.value = '';
            sortSelect.value = 'date';
            sortDirectionSelect.value = 'desc';
            
            // Show all cards
            contentCards.forEach(card => {
                card.style.display = '';
                card.classList.remove('highlight');
            });
            
            sortContent();
        });
        
        function filterContent() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            
            contentCards.forEach(card => {
                const title = card.getAttribute('data-title');
                const author = card.getAttribute('data-author');
                const cardText = card.querySelector('.card-text').textContent.toLowerCase();
                
                let showCard = true;
                
                // Apply search filter
                if (searchTerm) {
                    showCard = title.includes(searchTerm) || 
                              author.includes(searchTerm) || 
                              cardText.includes(searchTerm);
                }
                
                card.style.display = showCard ? '' : 'none';
                
                // Highlight matches
                if (showCard && searchTerm) {
                    card.classList.add('highlight');
                } else {
                    card.classList.remove('highlight');
                }
            });
            
            sortContent();
        }
        
        function sortContent() {
            const sortBy = sortSelect.value;
            const sortDirection = sortDirectionSelect.value;
            const cards = Array.from(contentCards).filter(card => card.style.display !== 'none');
            
            // Sort the cards
            cards.sort((a, b) => {
                let valueA, valueB;
                
                if (sortBy === 'title') {
                    valueA = a.getAttribute('data-title');
                    valueB = b.getAttribute('data-title');
                } else if (sortBy === 'author') {
                    valueA = a.getAttribute('data-author');
                    valueB = b.getAttribute('data-author');
                } else if (sortBy === 'date') {
                    valueA = parseInt(a.getAttribute('data-date'));
                    valueB = parseInt(b.getAttribute('data-date'));
                } else if (sortBy === 'votes') {
                    valueA = parseInt(a.getAttribute('data-votes'));
                    valueB = parseInt(b.getAttribute('data-votes'));
                }
                
                if (valueA < valueB) return sortDirection === 'asc' ? -1 : 1;
                if (valueA > valueB) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });
            
            // Reorder the cards
            cards.forEach(card => {
                contentContainer.appendChild(card);
            });
        }
        
        // Initialize with default sort
        sortContent();
    }
</script>
